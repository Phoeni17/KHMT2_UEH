import random
import KBB as tk
from KBB import *

class Rock_paper_scissors:
    def __init__(self, total_rounds):
        self.total_rounds = total_rounds
        self.current_round = 0
        self.user_wins = 0
        self.computer_wins = 0

    def computer_choice(self):
        return random.choice(['K√©o', 'B√∫a', 'Bao'])

    def determine_winner(self, user_choice, computer_choice):
        if user_choice == computer_choice:
            return 'H√≤a'
        else:
            if user_choice == 'K√©o':
                if computer_choice == 'Bao':
                    self.user_wins += 1
                    return 'B·∫°n th·∫Øng'
                else:
                    self.computer_wins += 1
                    return 'M√°y t√≠nh th·∫Øng'
            elif user_choice == 'B√∫a':
                if computer_choice == 'K√©o':
                    self.user_wins += 1
                    return 'B·∫°n th·∫Øng'
                else:
                    self.computer_wins += 1
                    return 'M√°y t√≠nh th·∫Øng'
            elif user_choice == 'Bao':
                if computer_choice == 'B√∫a':
                    self.user_wins += 1
                    return 'B·∫°n th·∫Øng'
                else:
                    self.computer_wins += 1
                    return 'M√°y t√≠nh th·∫Øng'

    def check_game_winner(self):
        if self.user_wins > self.total_rounds // 2:
            return 'B·∫°n ƒë√£ th·∫Øng c·∫£ tr√≤ ch∆°i!'
        elif self.computer_wins > self.total_rounds // 2:
            return 'M√°y t√≠nh ƒë√£ th·∫Øng c·∫£ tr√≤ ch∆°i!'
        elif self.current_round >= self.total_rounds:
            if self.user_wins > self.computer_wins:
                return 'B·∫°n ƒë√£ th·∫Øng c·∫£ tr√≤ ch∆°i!'
            elif self.computer_wins > self.user_wins:
                return 'M√°y t√≠nh ƒë√£ th·∫Øng c·∫£ tr√≤ ch∆°i!'
            else:
                return 'Tr√≤ ch∆°i h√≤a!'
        else:
            return None

game = None

def start_game():
    global game
    rounds = entry_rounds.get()
    game = Rock_paper_scissors(int(rounds))
    label_status.config(text=f"Tr√≤ ch∆°i b·∫Øt ƒë·∫ßu v·ªõi {rounds} v√≤ng. Ch·ªçn K√©o, B√∫a ho·∫∑c Bao ƒë·ªÉ ch∆°i!", fg="black")
    entry_rounds.config(state=tk.DISABLED)
    btn_start.config(state=tk.DISABLED)
    label_result.config(text="")
    label_score.config(text=f"ƒêi·ªÉm b·∫°n: 0 - M√°y t√≠nh: 0 | V√≤ng: 0/{game.total_rounds}")

def play(user_choice):
    if game is None:
        label_status.config(text="Vui l√≤ng b·∫Øt ƒë·∫ßu tr√≤ ch∆°i tr∆∞·ªõc.", fg="red")
        return
    if game.current_round >= game.total_rounds:
        label_status.config(text="Tr√≤ ch∆°i ƒë√£ k·∫øt th√∫c. Nh·∫•n b·∫Øt ƒë·∫ßu ƒë·ªÉ ch∆°i l·∫°i.", fg="red")
        return

    computer_choice = game.computer_choice()
    game.current_round += 1
    result = game.determine_winner(user_choice, computer_choice)

    label_result.config(text=f"M√°y t√≠nh ch·ªçn: {computer_choice}\nK·∫øt qu·∫£ v√≤ng: {result}")
    label_score.config(
        text=f"ƒêi·ªÉm b·∫°n: {game.user_wins} - M√°y t√≠nh: {game.computer_wins} | V√≤ng: {game.current_round}/{game.total_rounds}")

    winner = game.check_game_winner()
    if winner:
        label_status.config(text=winner, fg="blue")
        entry_rounds.config(state=tk.NORMAL)
        btn_start.config(state=tk.NORMAL)
    else:
        label_status.config(text="Ch·ªçn ti·∫øp K√©o, B√∫a ho·∫∑c Bao ƒë·ªÉ ch∆°i v√≤ng ti·∫øp theo.", fg="black")


root = tk.Tk ()
root.title("O·∫≥n T√π T√¨ - ƒê∆°n gi·∫£n :3")

frame_top = tk.Frame(root)
frame_top.pack(pady=10)
label_rounds = tk.Label(frame_top, text="Nh·∫≠p s·ªë v√≤ng ch∆°i:")
label_rounds.pack(side=tk.LEFT)
entry_rounds = tk.Entry(frame_top, width=5)  # ƒê√¢y l√† √¥ nh·∫≠p s·ªë v√≤ng
entry_rounds.pack(side=tk.LEFT, padx=5)
btn_start = tk.Button(frame_top, text="B·∫Øt ƒë·∫ßu", command=start_game)
btn_start.pack(side=tk.LEFT)

label_status = tk.Label(root, text="", fg="red")
label_status.pack()

frame_buttons = tk.Frame(root)
frame_buttons.pack(pady=10)

btn_rock = tk.Button(frame_buttons, text='‚úåÔ∏è K√©o', width=10, command=lambda: play('K√©o'))
btn_paper = tk.Button(frame_buttons, text='‚úä B√∫a', width=10, command=lambda: play('B√∫a'))
btn_scissors = tk.Button(frame_buttons, text='üñê Bao', width=10, command=lambda: play('Bao'))

btn_rock.pack(side=tk.LEFT, padx=5)
btn_paper.pack(side=tk.LEFT, padx=5)
btn_scissors.pack(side=tk.LEFT, padx=5)

label_result = tk.Label(root, text="", font=("Arial", 14), fg="blue")
label_result.pack(pady=5)

label_score = tk.Label(root, text="", font=("Arial", 12))
label_score.pack()

root.mainloop()